#!/usr/bin/php
<?php

// CONSTANTS ////////////////////////////////////////////////////////

// REQUIRES  ////////////////////////////////////////////////////////

require_once 'vendor/autoload.php';

// MAIN      ////////////////////////////////////////////////////////

// evaluate command line arguments
$flags = new donatj\Flags();

$sponges = & $flags->bool('foo', false, 'Enable the foo');
$what    = & $flags->uint('bar', 10, 'Number of bars');
$cat     = & $flags->string('baz', 'Fred', 'What to name the baz');
$verbose = & $flags->short('v', 'verbosity');

try {
    $flags->parse();
} catch(Exception $e) {
    die($e->getMessage() . PHP_EOL . $flags->getDefaults() . PHP_EOL );
}

$app = function ($request, $response) use (&$i) {
    $i++;
    $pid = getmypid();

    $text = "This is request number $i for #$pid.\n";
    $text = var_export($response, true);
    $headers = array('Content-Type' => 'text/plain');

    $response->writeHead(200, $headers);
    $response->end($text);
};




$http->on('request', $app);

$socket->listen(1337);

// lets try multiple children
for ($counter = 0; $counter < 5; $counter++) { 
	$pid = pcntl_fork();

	if ($pid == -1) {
	     die('could not fork');
	} else if ($pid) {
	     // we are the parent
	     //pcntl_wait($status); //Protect against Zombie children

		//$loop->run();
	} else {
	     // we are the child
		$loop->run();
	}
}
